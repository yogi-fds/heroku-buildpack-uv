#!/usr/bin/env bash

set -euo pipefail

function log() {
    echo "-----> $*"
}

function indent() {
    sed -e 's/^/       /'
}

export BUILD_DIR="$1"
export CACHE_DIR="$2"
export ENV_DIR="$3"

export UV_LINK_MODE=copy  # Default to copy mode (shows a warning otherwise)
export UV_CACHE_DIR="$CACHE_DIR"

# Make sure the CACHE_DIR exists
# https://devcenter.heroku.com/articles/buildpack-api#caching
mkdir -p "$CACHE_DIR"

shopt -s nullglob

# Run the rest of the script from the build directory
cd "$BUILD_DIR"

# Set any UV_ environment variables
# https://docs.astral.sh/uv/configuration/environment/
for env_file in "$ENV_DIR"/UV_* ; do
    export "$(basename "$env_file")=$(cat "$env_file" 2>/dev/null)"
done

if [ -z "${UV_VERSION:-}" ] ; then
    export UV_VERSION=0.6.1
    log "No uv version specified in UV_VERSION config var. Defaulting to $UV_VERSION."
else
    log "Using uv version from UV_VERSION config var: $UV_VERSION"
fi

log "Install uv"
curl -LsSf "https://astral.sh/uv/$UV_VERSION/install.sh" | sh 2>&1 | indent

# Make the uv commands available
source "$HOME/.local/bin/env"

# Install a Python version with uv so we get more
# recent releases by default
log "Install uv Python version"
uv python install 2>&1 | indent

# Custom index URL
CUSTOM_INDEX="--extra-index-url https://artifactory.factset.com/artifactory/api/pypi/python/simple"
CUSTOM_INDEX_LINE="--extra-index-url https://artifactory.factset.com/artifactory/api/pypi/python/simple"
log "Using custom index URL as extra: https://artifactory.factset.com/artifactory/api/pypi/python/simple"

# Function to add custom index to requirements file
add_custom_index() {
    local req_file=$1
    log "Adding custom index URL to $req_file"
    # Create a temporary file with the index line
    echo "$CUSTOM_INDEX_LINE" > temp_index
    # Append the original requirements file
    cat "$req_file" >> temp_index
    # Replace the original with our modified version
    mv temp_index "$req_file"
}

if [ -z "${UV_EXPORT_OPTIONS:-}" ] ; then
    log "Export requirements.txt from uv"
    uv export $CUSTOM_INDEX --output-file requirements.txt --no-dev --no-emit-project --frozen 2>&1 | indent
    add_custom_index requirements.txt

    log "Export requirements-test.txt from uv (for Heroku CI)"
    uv export $CUSTOM_INDEX --output-file requirements-test.txt --no-emit-project --frozen 2>&1 | indent
    add_custom_index requirements-test.txt
else
    log "Export requirements.txt from uv (with $UV_EXPORT_OPTIONS)"
    echo "$UV_EXPORT_OPTIONS" | xargs uv export $CUSTOM_INDEX --output-file requirements.txt --no-dev --no-emit-project --frozen 2>&1 | indent
    add_custom_index requirements.txt

    log "Export requirements-test.txt from uv (for Heroku CI, with $UV_EXPORT_OPTIONS)"
    echo "$UV_EXPORT_OPTIONS" | xargs uv export $CUSTOM_INDEX --output-file requirements-test.txt --no-emit-project --frozen 2>&1 | indent
    add_custom_index requirements-test.txt
fi

if [ -f runtime.txt ] ; then
    log "runtime.txt found, skipping runtime.txt generation" >&2
    exit 0
elif [ -f .python-version ]; then
    log ".python-version found, skipping .python-version generation" >&2
    exit 0
else
    log "Generating .python-version from uv Python version"
    PYTHON_VERSION_OUTPUT=$(uv run python --version)
    echo "${PYTHON_VERSION_OUTPUT//Python /}" > .python-version
    cat .python-version | indent
fi

log "Uninstalling uv-managed Python versions"
uv python uninstall --all 2>&1 | indent || echo "Failed to uninstall uv-managed Python versions..."
